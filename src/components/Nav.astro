---
import Icon from "./Icon.astro";

interface Link {
  title: string;
  link: string;
  icon: string;
  color: string;
}

const links: Link[] = [
  {
    title: "Home",
    link: "/",
    icon: "house",
    color: "text-blue-400",
  },
  {
    title: "Projects",
    link: "/work",
    icon: "suitcase",
    color: "text-green-400",
  },
  {
    title: "Contact",
    link: "/contact",
    icon: "envelope",
    color: "text-orange-400",
  },
];
---

<!-- Desktop Navigation -->
<nav class="fixed md:left-6 md:top-1/2 md:-translate-y-1/2 max-md:bottom-6 max-md:left-1/2 max-md:-translate-x-1/2 z-50">
  <ul class="flex md:flex-col md:gap-2 max-md:gap-2 p-2 bg-base-100 border border-base-300 rounded-lg">
    {links.map(({ title, link, icon }) => (
      <li>
        <a 
          aria-label={title} 
          href={link} 
          class="w-10 h-10 flex items-center justify-center rounded-md bg-base-100 hover:bg-base-200 transition-colors duration-200"
        >
          <Icon name={icon} size={20} />
        </a>
      </li>
    ))}  </ul>
</nav>

<!-- Back to Top Button -->
<button 
  id="back-to-top"
  class="fixed bottom-24 right-6 md:bottom-6 md:right-6 btn btn-circle btn-primary shadow-lg opacity-0 pointer-events-none transition-all duration-300 hover:scale-110 z-40"
  aria-label="Back to top"
>
  <Icon name="arrow-up" size={20} />
</button>

<script>
  // Enhanced navigation functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Theme switching functionality
    const themes = ['light', 'dark', 'cupcake', 'forest', 'synthwave', 'cyberpunk', 'abyss'];
    let currentThemeIndex = 0;
    
    // Initialize theme from localStorage or default
    const savedTheme = localStorage.getItem('sbc-theme');
    if (savedTheme && themes.includes(savedTheme)) {
      currentThemeIndex = themes.indexOf(savedTheme);
      document.documentElement.setAttribute('data-theme', savedTheme);
    } else {
      // Set default theme
      document.documentElement.setAttribute('data-theme', themes[0]);
      localStorage.setItem('sbc-theme', 'abyss');
    }
    
    function switchTheme() {
      currentThemeIndex = (currentThemeIndex + 1) % themes.length;
      const newTheme = themes[currentThemeIndex];
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('sbc-theme', newTheme);
      
      // Show theme notification
      showThemeNotification(newTheme);
      
      // Add visual feedback to button
      const buttons = [document.getElementById('theme-toggle'), document.getElementById('mobile-theme-toggle')];
      buttons.forEach(button => {
        if (button) {
          button.style.transform = 'scale(0.9)';
          setTimeout(() => {
            button.style.transform = 'scale(1)';
          }, 150);
        }
      });
    }
    
    function showThemeNotification(theme: string) {
      // Remove existing notification
      const existing = document.querySelector('.theme-notification');
      if (existing) existing.remove();
      
      // Create new notification
      const notification = document.createElement('div');
      notification.className = 'theme-notification fixed top-6 left-1/2 -translate-x-1/2 bg-base-100 text-base-content px-6 py-3 rounded-2xl shadow-xl z-[60] transform -translate-y-full opacity-0 transition-all duration-300 border border-base-300';
      notification.innerHTML = `
        <div class="flex items-center gap-3">
          <i class="fa-solid fa-palette text-primary"></i>
          <span class="font-semibold">Theme: ${theme.charAt(0).toUpperCase() + theme.slice(1)}</span>
        </div>
      `;
      document.body.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.style.transform = 'translateX(-50%) translateY(0)';
        notification.style.opacity = '1';
      }, 100);
      
      // Animate out
      setTimeout(() => {
        notification.style.transform = 'translateX(-50%) translateY(-100%)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.remove();
          }
        }, 300);
      }, 2500);
    }
    
    // Theme toggle button handlers
    const themeToggle = document.getElementById('theme-toggle');
    const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
    
    if (themeToggle) {
      themeToggle.addEventListener('click', (e) => {
        e.preventDefault();
        switchTheme();
      });
    }
    
    if (mobileThemeToggle) {
      mobileThemeToggle.addEventListener('click', (e) => {
        e.preventDefault();
        switchTheme();
      });
    }
      // Back to top functionality
    const backToTopBtn = document.getElementById('back-to-top');
    
    if (backToTopBtn) {
      // Show/hide back to top button based on scroll position
      function handleScroll() {
        if (backToTopBtn && window.scrollY > 300) {
          backToTopBtn.style.opacity = '1';
          backToTopBtn.style.pointerEvents = 'auto';
          backToTopBtn.style.transform = 'scale(1)';
        } else if (backToTopBtn) {
          backToTopBtn.style.opacity = '0';
          backToTopBtn.style.pointerEvents = 'none';
          backToTopBtn.style.transform = 'scale(0.8)';
        }
      }
      
      window.addEventListener('scroll', handleScroll);
      
      // Scroll to top when clicked
      backToTopBtn.addEventListener('click', (e) => {
        e.preventDefault();
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
        
        // Add click animation
        if (backToTopBtn) {
          backToTopBtn.style.transform = 'scale(0.9)';
          setTimeout(() => {
            if (backToTopBtn) {
              backToTopBtn.style.transform = 'scale(1)';
            }
          }, 150);        }
      });
    }
    
    // Active page indicator
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('nav a') as NodeListOf<HTMLAnchorElement>;
    
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      
      if (href === currentPath || 
          (currentPath === '/' && href === '/') ||
          (currentPath.startsWith('/work') && href === '/work') ||
          (currentPath.startsWith('/contact') && href === '/contact')) {
        link.classList.add('bg-primary', 'text-primary-content');
        link.classList.remove('bg-base-100', 'hover:bg-base-200');
      }
    });
    
    // Add keyboard navigation support
    document.addEventListener('keydown', (e) => {
      // Toggle theme with T key
      if (e.key.toLowerCase() === 't' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault();
        switchTheme();
      }
      
      // Scroll to top with Home key
      if (e.key === 'Home' && (e.ctrlKey || e.metaKey)) {
        e.preventDefault();
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      }
    });
  });
</script>
