---
import MotionDiv from "./MotionDiv.tsx";
import MotionButton from "./MotionButton.tsx";
---

<section class="relative w-screen h-screen flex justify-center items-center overflow-hidden bg-gradient-to-br from-base-100 via-base-200 to-base-300">
    <!-- Main Content with Improved Spacing -->
  <div class="relative z-10 flex flex-col gap-8 text-center px-6 max-w-6xl mx-auto -mt-12">
    <!-- Company Name with Elegant Styling -->
    <MotionDiv client:load animation="slideDown" delay={0} duration={0.8}>
      <div class="mb-2">
        <h1 class="text-lg md:text-2xl lg:text-3xl font-bold bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent">
          Senior Blockchain Company
        </h1>
      </div>
    </MotionDiv>
    
    <!-- Main Title with Enhanced Typography -->
    <MotionDiv client:load animation="scale" delay={0.2} duration={0.8}>
      <div class="space-y-6">
        <!-- Improved Dynamic Typing Effect -->
        <div class="h-20 md:h-24 lg:h-28 flex items-center justify-center">
          <h2 id="typing-text" class="text-3xl md:text-5xl lg:text-6xl font-black text-base-content tracking-tight leading-tight min-h-[1.2em]">
            <span class="text-primary opacity-0" id="initial-text"></span>
          </h2>
        </div>
      </div>
    </MotionDiv>
    
    <!-- Subtitle with Better Line Height and Spacing -->
    <MotionDiv client:load animation="fade" delay={0.4} duration={0.8}>
      <p class="text-lg md:text-xl lg:text-2xl text-base-content/80 max-w-4xl mx-auto leading-relaxed py-2">
        Leading <span class="text-primary font-semibold">software development</span> with expertise in 
        <span class="text-secondary font-semibold">blockchain & AI</span> innovation for modern businesses
      </p>
    </MotionDiv>

    <!-- Enhanced CTA Buttons with More Space -->
    <MotionDiv client:load animation="slideUp" delay={0.6} duration={0.8}>
      <div class="flex flex-col sm:flex-row gap-6 justify-center items-center mt-4">
        <MotionButton client:load href="#about" className="btn btn-primary btn-lg text-white font-bold px-12 py-5 rounded-full shadow-lg hover:shadow-xl group w-full sm:w-64 min-w-fit">
          <span class="mr-2">About Us</span>
          <svg class="w-5 h-5 inline group-hover:translate-y-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        </MotionButton>
        
        <MotionButton client:load href="/work" className="btn btn-outline btn-lg font-bold px-12 py-5 rounded-full group w-full sm:w-64 min-w-fit">
          <span class="mr-2">View Projects</span>
          <svg class="w-5 h-5 inline group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
          </svg>
        </MotionButton>
      </div>
    </MotionDiv>
  </div>

  <!-- Scroll Indicator -->
  <div class="absolute bottom-10 left-1/2 transform -translate-x-1/2">
    <div class="w-6 h-12 border-2 border-primary rounded-full flex justify-center">
      <div class="w-1 h-3 bg-primary rounded-full mt-2"></div>
    </div>
  </div>
</section>

<script>
  // Enhanced typing effect with immediate start
  const texts = [
    "Premium Software Development",
    "Professional Website Design", 
    "Innovative Mobile Applications",
    "Expert Software Consulting",
    "Advanced Blockchain & AI Solutions"
  ];
  
  let textIndex = 0;
  let charIndex = 0;
  let isDeleting = false;
  let typingStarted = false;
  const typingElement = document.getElementById('typing-text');
  
  function typeText() {
    if (!typingElement) return;
    
    const currentText = texts[textIndex];
    
    // Show cursor immediately when typing starts
    if (!typingStarted) {
      typingStarted = true;
      typingElement.innerHTML = `<span class="text-primary"></span><span class="animate-pulse text-primary">|</span>`;
    }
    
    if (isDeleting) {
      // Deleting characters
      const displayText = currentText.substring(0, charIndex);
      typingElement.innerHTML = `<span class="text-primary">${displayText}</span><span class="animate-pulse text-primary">|</span>`;
      charIndex--;
    } else {
      // Typing characters
      const displayText = currentText.substring(0, charIndex);
      typingElement.innerHTML = `<span class="text-primary">${displayText}</span><span class="animate-pulse text-primary">|</span>`;
      charIndex++;
    }
    
    // Logic for when to switch between typing and deleting
    if (!isDeleting && charIndex === currentText.length) {
      // Finished typing - show complete text with cursor
      typingElement.innerHTML = `<span class="text-primary">${currentText}</span><span class="animate-pulse text-primary">|</span>`;
      setTimeout(() => {
        isDeleting = true;
        typeText();
      }, 2500); // Pause to show complete text
      return;
    } else if (isDeleting && charIndex === 0) {
      // Finished deleting - move to next text
      isDeleting = false;
      textIndex = (textIndex + 1) % texts.length;
    }
    
    // Dynamic typing speed for natural feel
    let speed = isDeleting ? 60 : 120;
    
    // Add slight randomness for realistic typing
    speed += Math.random() * 40 - 20;
    
    // Ensure minimum speed
    speed = Math.max(speed, 30);
    
    setTimeout(typeText, speed);
  }
  
  // Start typing effect immediately when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Start typing immediately with no delay
    setTimeout(() => {
      if (typingElement) {
        typeText();
      }
    }, 300); // Very short delay just to ensure DOM is fully ready
  });
  
  // Fallback for window load
  window.addEventListener('load', () => {
    if (!typingStarted && typingElement) {
      typeText();
    }
  });
</script>

<style>
  /* Improved animations with better timing */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translate3d(0, 40px, 0);
    }
    to {
      opacity: 1;
      transform: translate3d(0, 0, 0);
    }
  }

  .animate-fade-in-up {
    animation: fadeInUp 1.2s ease-out both;
  }
  
  /* Improved line spacing for text */
  #typing-text {
    line-height: 1.3;
    letter-spacing: -0.02em;
  }
  
  /* Enhanced cursor animation */
  #typing-text span:last-child {
    animation: cursor-blink 1s ease-in-out infinite;
  }
  
  @keyframes cursor-blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
  
  .delay-300 { animation-delay: 0.3s; }
  .delay-500 { animation-delay: 0.5s; }
  .delay-700 { animation-delay: 0.7s; }
  .delay-1000 { animation-delay: 1s; }
</style>